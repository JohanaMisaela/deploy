{"version":3,"file":"static/js/41.c15eeabf.js","mappings":"8MAqEA,QAzDuB,IAAM,CAC3B,KAAM,CAAE,YAAAA,CAAY,G,EAAI,MAAS,EAE3BC,G,EAAc,MAAe,EAC7BC,G,EAAiB,O,EACrB,MAAyBD,EAAY,MAAM,CAC7C,EACME,EACJF,GAAeA,EAAY,OAAS,QAAUC,EAAiBD,EAC3D,CAACG,EAAK,CAAE,OAAAC,EAAQ,MAAAC,CAAM,CAAC,G,EAAI,KAAW,EACtCC,I,EAAS,MAAY,IAAW,GAAK,CAAC,GAAG,OAC7CC,GACEA,EAAK,YAAcA,EAAK,YAAcA,EAAK,gBAAgB,OAAS,CACxE,EACA,GAAID,EAAM,SAAW,EACnB,OAAO,KAET,MAAME,EAAeR,GAAeM,EAAM,OAAS,EAEnD,IAAIG,EAAcV,EAAY,MAAQA,EAAY,OAAUK,EACxDM,EAAcN,EAElB,OAAIK,EAAaJ,IACfI,EAAaJ,EACbK,EAAeX,EAAY,OAASA,EAAY,MAASM,GAIzD,gBAAC,IAAI,CAAC,IAAK,CAAE,KAAM,OAAQ,MAAO,CAAE,cAAe,QAAS,CAAE,GAC5D,gBAAC,IAAI,CACH,IAAK,CACH,KAAM,QACN,EAAG,KACH,UAAW,EACX,SAAU,EACV,eAAgB,SAChB,WAAY,QACd,EACA,IAAAF,CAAA,EAEA,gBAAC,IAAS,CACR,IAAKH,EAAY,GACjB,QAASE,GAAkB,GAC3B,OAAQF,EAAY,OACpB,OAAQU,EACR,MAAOD,CAAA,CACT,CACF,EACCD,GACC,gBAAC,IAAgB,CACf,MAAOF,EAAM,OAAOC,GAAQA,EAAK,KAAOP,EAAY,MAAM,EAC5D,CAEJ,CAEJ,C","sources":["layouts/PinnedTrackView.jsx"],"sourcesContent":["import React from \"react\";\nimport { useMeasure } from \"react-use\";\nimport {\n  selectPeers,\n  selectVideoTrackByPeerID,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { Flex, useTheme } from \"@100mslive/react-ui\";\nimport { GridSidePaneView } from \"../components/gridView\";\nimport VideoTile from \"../components/VideoTile\";\nimport { usePinnedTrack } from \"../components/AppData/useUISettings\";\n\nconst PinnedPeerView = () => {\n  const { aspectRatio } = useTheme();\n  // can be audio or video track, if tile with only audio track is pinned\n  const pinnedTrack = usePinnedTrack();\n  const peerVideoTrack = useHMSStore(\n    selectVideoTrackByPeerID(pinnedTrack.peerId)\n  );\n  const pinnedVideoTrack =\n    pinnedTrack && pinnedTrack.type === \"audio\" ? peerVideoTrack : pinnedTrack;\n  const [ref, { height, width }] = useMeasure();\n  const peers = (useHMSStore(selectPeers) || []).filter(\n    peer =>\n      peer.videoTrack || peer.audioTrack || peer.auxiliaryTracks.length > 0\n  );\n  if (peers.length === 0) {\n    return null;\n  }\n  const showSidePane = pinnedTrack && peers.length > 1;\n\n  let finalWidth = (aspectRatio.width / aspectRatio.height) * height;\n  let finalHeight = height;\n\n  if (finalWidth > width) {\n    finalWidth = width;\n    finalHeight = (aspectRatio.height / aspectRatio.width) * width;\n  }\n\n  return (\n    <Flex css={{ size: \"100%\", \"@lg\": { flexDirection: \"column\" } }}>\n      <Flex\n        css={{\n          flex: \"1 1 0\",\n          p: \"$8\",\n          minHeight: 0,\n          minWidth: 0,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n        ref={ref}\n      >\n        <VideoTile\n          key={pinnedTrack.id}\n          trackId={pinnedVideoTrack?.id}\n          peerId={pinnedTrack.peerId}\n          height={finalHeight}\n          width={finalWidth}\n        />\n      </Flex>\n      {showSidePane && (\n        <GridSidePaneView\n          peers={peers.filter(peer => peer.id !== pinnedTrack.peerId)}\n        />\n      )}\n    </Flex>\n  );\n};\n\nexport default PinnedPeerView;\n"],"names":["aspectRatio","pinnedTrack","peerVideoTrack","pinnedVideoTrack","ref","height","width","peers","peer","showSidePane","finalWidth","finalHeight"],"sourceRoot":""}